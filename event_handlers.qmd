---
editor: 
  markdown: 
    wrap: sentence
---

# IMT Dispatch Algorithm

Our MATSim model employs an algorithm to determine the most appropriate IMT to dispatch to an incident when it occurs.
The algorithm is implemented in Java, and its objective is to find the closest available teams to the incident's location based on calculated travel time.

## Code Structure:

The algorithm is encapsulated within a Java class named `ClosestImtFinder`.
This class is part of the IMT.optimizer package and utilizes a variety of imported resources to calculate travel times and determine the best IMT to respond to an incident.

## Components of ClosestImtFinder:

-   `Fleet`: Represents the collection of all IMT units.
-   `LeastCostPathCalculator`: A tool to calculate the fastest path from one location to another.
-   `TravelTime`: An estimator that calculates the travel time for a given route.

### Key Methods:

-   `calculateArrivalTime` Method:
    -   **Purpose**: Calculates the arrival time of an IMT vehicle to a given incident location.
    -   **Parameters**:
      -   `vehicle`: The IMT vehicle being evaluated.
      -   `toLink`: The location of the incident.
      -   `incidentStart`: The time at which the incident occurs.
    -   **Process**:
      -   It first checks if the vehicle's schedule has begun. If not, the vehicle is considered unavailable (returning infinity).
      -   Then, it checks if the vehicle is currently busy with a task other than waiting. If it is, the vehicle is again marked as unavailable.
      -   If the vehicle is available, it calculates the path and the arrival time from the vehicle's last known location to the incident's location.
-   `getClosestVehicles` Method:
    -   **Purpose**: Retrieves a list of the closest IMT vehicles based on the fastest arrival times to the incident.

    -   **Parameters**:
        - `toLink`: The location of the incident.
        -   `respondingIMTs`: The number of closest IMT vehicles to find.
        -   `incidentStart`: The time at which the request for IMT deployment is made.

    -   **Process**: - Filters the fleet to include only those vehicles that are in service during the request time.

        -   Sorts these vehicles by their calculated arrival time to the incident.
        -   Limits the result to the specified number of responding IMTs.

    -   **Output**: A list of the closest IMT units ready to be dispatched.
-   Dispatch Mechanism: Once the getClosestVehicles method processes the fleet data, it returns a sorted list of vehicles based on their arrival times. The list is then used to dispatch the appropriate number of IMT units to the incident location as the incident unfolds. This ensures that the quickest possible response is made available, enhancing the efficiency and effectiveness of the incident management process.

``` java
package IMT.optimizer;

import ...

/* Handles the search for the closest IMT vehicles to an incident link. */
public class ClosestImtFinder {

    private final Fleet fleet;
    private final LeastCostPathCalculator router;
    private final TravelTime travelTime;

    public ClosestImtFinder(Fleet fleet, LeastCostPathCalculator router, 
                            TravelTime travelTime) {}

/* Calculates the arrival time for an IMT vehicle at the incident start time. */
    private double calculateArrivalTime(DvrpVehicle vehicle, 
                                        Link toLink, 
                                        Double incidentStart) {
        if (!isVehicleAvailable(vehicle, incidentStart)) {
            return Double.POSITIVE_INFINITY;
        }

        // Determine the path and calculate arrival time
        Link fromLink = Schedules.getLastLinkInSchedule(vehicle);
        VrpPathWithTravelData pathToIncident = 
        VrpPaths.calcAndCreatePath(fromLink, toLink, incidentStart, 
                                   router, travelTime);
        return pathToIncident.getArrivalTime();
    }

/* Checks vehicle availability based on its schedule and current task. */
    private boolean isVehicleAvailable(DvrpVehicle vehicle, 
                                       Double incidentStart) {
        Schedule schedule = vehicle.getSchedule();
        Task currentTask = schedule.getCurrentTask();
        return schedule.getStatus() == Schedule.ScheduleStatus.STARTED &&
               currentTask.getTaskType() == Optimizer.ImtTaskType.WAIT;
    }

/* Retrieves a list of the closest IMTs based on arrival times. */
    public List<DvrpVehicle> getClosestVehicles(Link toLink, 
                                                int respondingIMTs, 
                                                double incidentStart) {
        return fleet.getVehicles().values().stream()
                .filter(vehicle -> vehicle.getServiceBeginTime() <= incidentStart &&
                                  vehicle.getServiceEndTime() >= incidentStart)
                .sorted(Comparator.comparingDouble(vehicle -> 
                calculateArrivalTime(vehicle, toLink, incidentStart)))
                .limit(respondingIMTs)
                .collect(Collectors.toList());
    }
}
                                   
```

# IMT Network Change Events

This is the event handler that processes IMT arrivals and generates their corresponding NCE.

``` java
    /**
     * Handles an ImtEvent by creating and adding a corresponding 
     * NetworkChangeEvent to the scenario's network.
     *
     * Only called if the event's arrival time is less than the incident end time.
     *
     * @param imtEvent the ImtEvent to be handled
     */
    private void handleImtEvent(ImtEvent imtEvent) {
            NetworkChangeEvent imtArrival = new NetworkChangeEvent(imtEvent.getArrivalTime());
            double currentCapacity = imtEvent.getCurrentCapacity();
            imtArrival.setFlowCapacityChange(new NetworkChangeEvent.ChangeValue
            (NetworkChangeEvent.ChangeType.ABSOLUTE_IN_SI_UNITS, currentCapacity));
            imtArrival.addLink(scenario.getNetwork().getLinks().get(imtEvent.getLinkId()));
            NetworkUtils.addNetworkChangeEvent(scenario.getNetwork(), imtArrival);
        }
```
